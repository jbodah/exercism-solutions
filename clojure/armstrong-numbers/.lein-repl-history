(source num-digits)
(source armstrong-numbers/num-digits)
(num-digits 0)
(armstrong-numbers/num-digits 0)
(require 'armstrong-numbers)
(in-ns 'armstrong-numbers)
(num-digits 0)
exit
(armstrong-numbers/num-digits 0)
(in-ns 'armstrong-numbers)
(num-digits 0)
(load "src/armstrong_numbers")
exit
(armstrong-numbers/num-digits 0)
(in-ns 'armstrong-numbers)
(num-digits 0)
(num-digits 10)
exit
(in-ns 'armstrong-numbers)
(ns-publics 'armstrong-numbers)
exit
(in-ns 'armstrong-numbers)
(keys (ns-publics 'armstrong-numbers))
(ns-publics 'armstrong-numbers)
(clojure.core/ns-publics 'armstrong-numbers)
(clojure.core/ns-interns 'armstrong-numbers)
exit
(use 'armstrong-numbers)
(use 'armstrong-numberz)
(num-digits 0)
(num-digits 1)
(-> 200 (/ 10))
(-> 200 (/ 10) int)
(-> 199 (/ 10) int)
(print 1 2)
(println 1 2)
exit
(use 'armstron-numbers)
(use 'armstrong-numbers)
(num-digits 0)
(num-digits 1)
(use 'armstrong-numbers)
(num-digits 1)
(num-digits 10)
(num-digits 100)
(num-digits 10000000)
(use 'armstrong-numbers)
exit
(require 'armstrong-numbers)
(armstrong-numbers/armstrong? 3)
(int '1')
(int "1")
(->> "123" str)
(->> 123 str)
(->> 123 str seq)
(->> 123 str seq int)
(->> 123 str seq map(int))
(->> 123 str seq (map int))
(->> 123 str seq map(int) map(#(%1 - 48))
)
(->> 123 str seq map(int) map(#(- %1 48)))
(->> 123 str seq map(int) map(#(- 48)))
(->> 123 str seq map(int) map(#(- %1 48)))
(->> 123 str seq map(int)))
(->> 123 str seq map(int))
(->> 123 str seq (map int) (map #(%1 - 48)))
(->> 123 str seq (map int) (map #(-%1 48)))
(->> 123 str seq (map int) (map #(- %1 48)))
exit
(use 'armstrong-numbers)
exit
(use 'armstrong-numbers)
(armstrong-numbers/armstrong? 3)
(armstrong-numbers/armstrong? 30)
exit
